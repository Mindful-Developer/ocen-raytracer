import std::image::Image
import std::json::parse_from_file
import std::argparse::Parser
import std::logging::{ init_logging, log }
import @core::scene::Scene
import @core::render::render
import std::video_renderer::VideoRenderer


def main(argc: i32, argv: &str) {
    let start_time = 0.0
    let duration = 5.0
    let fps = 5

    let fps_interval = 1.0 / (duration * fps as f32)
    init_logging()

    let parser = Parser::make("ocen-raytracer")
    let scene_path = parser.add_str("scene", help:"Path to the scene JSON file")
    let out_file = parser.add_str("-o", help:"Path to the output image file", defolt:"./build/out.png")
    parser.parse(argc, argv)
    let scene = Scene::from_json(parse_from_file(*scene_path), start_time)
    log(Info, f"Scene loaded with {scene.objects.size} objects")
    log(Info, f"Rendering {scene.camera.width}x{scene.camera.height} image with {scene.camera.num_samples} samples per pixel")
    let image = Image::new(scene.camera.width, scene.camera.height)
    log(Info, f"Loading scene from {*scene_path}")
    let vr = VideoRenderer::create(FFMPEG, image.width, image.height, fps)
   
    for let i = start_time; i <= start_time + duration; i += fps_interval {
        scene = Scene::from_json(parse_from_file(*scene_path), i)
        render(image, &scene)
        vr.send_frame(image)
    }
    vr.finish()
    log(Info, f"Saving image to {*out_file}")
    image.save(*out_file)
}


/// internal

@compiler c_flag "-Ofast -ffast-math -ftree-vectorize -flto=full -march=native -Xpreprocessor -fopenmp -lomp -Wno-extra-tokens"
